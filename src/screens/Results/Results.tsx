import { Ionicons } from '@expo/vector-icons';
import {
  NavigationProp,
  RouteProp,
  useNavigation,
  useRoute,
} from '@react-navigation/native';
import { StatusBar } from 'expo-status-bar';
import React, { useCallback, useMemo } from 'react';
import {
  Image,
  Linking,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from 'react-native';
import { Row, Rows, Table } from 'react-native-reanimated-table';

import { RootStackParamList } from '../../../App';
import { shadows } from '../../styles/shadows';

export const Results = () => {
  const route = useRoute<RouteProp<RootStackParamList>>();

  const navigator = useNavigation<NavigationProp<RootStackParamList>>();

  const { title, image, mode, result } = route?.params as {
    image: string;
    result: Record<string, unknown>;
    mode: 'MEAL' | 'GROCERIES' | 'NUTRITION';
    title: 'Meal Log' | 'Groceries Log' | 'Nutrition Log';
  };

  const retakeCallback = useCallback(() => {
    navigator.navigate('Logger', { mode, title });
  }, [mode, navigator, title]);

  const closeCallback = useCallback(() => {
    navigator.navigate('HomeTabs', {});
  }, [navigator]);

  const openHealthierChoiceLink = useCallback(() => {
    return Linking.openURL(
      'https://www.healthhub.sg/live-healthy/make_healthier_choice',
    );
  }, []);

  const nutrition = useMemo(() => {
    if (mode !== 'NUTRITION') {
      return null;
    }

    const nutrition = (result?.nutrition || []) as {
      nutrient: string;
      value: number | string;
      unit: string;
    }[];

    return nutrition.map(({ nutrient, value, unit }) => [
      nutrient,
      value,
      (unit || '').toString().toLowerCase(),
    ]);
  }, [mode, result?.nutrition]);

  return (
    <>
      <StatusBar style="light" />
      <View style={styles.container}>
        <Image src={'data:image/jpg;base64,' + image} style={styles.image} />
        <View style={styles.disclaimer}>
          <Ionicons
            name="information-circle"
            style={styles.disclaimerIcon}
            size={24}
          />
          <Text style={styles.disclaimerText}>
            Results are automatically generated by AI and should be used for
            informational purposes only
          </Text>
        </View>
        <ScrollView style={styles.scroller}>
          {mode === 'MEAL' && (
            <>
              <Text style={styles.title}>
                Dish: {result?.mealName as string}
              </Text>
              <Text style={styles.subtitle}>ESTIMATED CALORIES</Text>
              <Text style={styles.description}>
                {result?.calories + ' CAL'}
              </Text>
              <Text style={styles.subtitle}>INGREDIENTS</Text>
              <Text style={styles.description}>
                {(result?.ingredients as string[])?.join?.(', ') ||
                  'Unavailable'}
              </Text>
              <Text style={styles.subtitle}>ADVICE</Text>
              <Text style={styles.description}>
                {result?.healthAdvisory + '.'}
              </Text>
              <Text style={styles.subtitle}>SUITABILITY</Text>
              <Text style={styles.description}>
                {'Generally healthy? ' + (result?.isHealthy ? 'üëç' : 'üëé')}
              </Text>
              <Text style={styles.description}>
                {'For diabetes? ' +
                  (result?.isHealthyForDiabetes ? 'üëç' : 'üëé')}
              </Text>
              <Text style={styles.description}>
                {'For high cholesterol? ' +
                  (result?.isHealthyForHighCholesterol ? 'üëç' : 'üëé')}
              </Text>
              <Text style={styles.description}>
                {'For hypertension? ' +
                  (result?.isHealthyForHypertension ? 'üëç' : 'üëé')}
              </Text>
              <Text style={styles.subtitle}>IS IT A REAL MEAL</Text>
              <Text style={styles.lastDescription}>
                {result?.isLegitimate
                  ? 'Steady. This photo seems legit no cap.'
                  : 'This photo seems like chiong (fake) one leh.'}
              </Text>
            </>
          )}

          {mode === 'GROCERIES' && (
            <>
              <Text style={styles.title}>
                Item: {result?.productName as string}
              </Text>
              <Text style={styles.subtitle}>BRAND</Text>
              <Text style={styles.description}>{result?.brand as string}</Text>
              <Text style={styles.subtitle}>ADVICE</Text>
              <Text style={styles.description}>
                {result?.healthAdvisory + '.'}
              </Text>
              <Text style={styles.subtitle}>NUTRIGRADE</Text>
              <Text style={styles.description}>
                {(result?.nutrigrade as string) || 'Unavailable'}
              </Text>
              <Text style={styles.subtitle}>HEALTHIER CHOICE</Text>
              <Text style={styles.description}>
                {result?.isHealthierChoice
                  ? "Nice, you've found a Healthier Choice product! Look out for these products to enjoy healthier food choices."
                  : 'This does not seem like a Healthier Choice product. Try to look for the healthier choice pyramid symbol.'}
              </Text>
              <Text
                style={[styles.linkText, styles.lastDescription]}
                onPress={openHealthierChoiceLink}
              >
                Learn more about Healthier Choice...
              </Text>
            </>
          )}

          {mode === 'NUTRITION' && (
            <>
              <Text style={styles.title}>Nutrition Information</Text>
              <Text style={styles.subtitle}>ADVICE</Text>
              <Text style={styles.description}>
                {result?.healthAdvisory + '.'}
              </Text>
              <Text style={styles.subtitle}>INGREDIENTS</Text>
              <Text style={styles.description}>
                {(result?.ingredients as string[])?.join?.(', ') ||
                  'Unavailable'}
              </Text>
              <Text style={styles.subtitle}>NUTRITION</Text>
              {nutrition?.length ? (
                <Table style={styles.table} borderStyle={styles.tableBorder}>
                  <Row
                    data={['Nutrition', 'Value', 'Unit']}
                    style={styles.tableHead}
                    textStyle={styles.tableHeadText}
                  />
                  <Rows data={nutrition ?? []} textStyle={styles.tableText} />
                </Table>
              ) : (
                <Text style={styles.lastDescription}>Unavailable</Text>
              )}
            </>
          )}
        </ScrollView>

        <View style={styles.actionContainer}>
          <TouchableOpacity
            style={styles.primaryButton}
            onPress={retakeCallback}
          >
            <Text style={styles.buttonText}>Take another photo</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.secondaryButton}
            onPress={closeCallback}
          >
            <Text style={styles.secondaryButtonText}>Close</Text>
          </TouchableOpacity>
        </View>
      </View>
    </>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'flex-start',
    alignItems: 'flex-start',
    backgroundColor: '#FFFFFF',
  },
  image: {
    display: 'flex',
    width: '100%',
    height: '30%',
  },
  disclaimer: {
    display: 'flex',
    width: '100%',
    paddingHorizontal: 12,
    paddingVertical: 8,
    flexShrink: 0,
    backgroundColor: '#5A72A0',
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  disclaimerIcon: {
    color: '#FFFFFF',
    margin: 8,
  },
  disclaimerText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontFamily: 'Inter-SemiBold',
    margin: 4,
  },
  scroller: {
    width: '100%',
    display: 'flex',
    flexGrow: 1,
    flexShrink: 1,
  },
  title: {
    fontSize: 20,
    fontFamily: 'Inter-ExtraBold',
    textTransform: 'capitalize',
    marginHorizontal: 24,
    marginTop: 16,
  },
  subtitle: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    textTransform: 'uppercase',
    marginHorizontal: 24,
    marginTop: 16,
  },
  description: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    marginHorizontal: 24,
  },
  lastDescription: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    marginHorizontal: 24,
    marginBottom: 24,
  },
  actionContainer: {
    width: '100%',
    padding: 16,
    backgroundColor: '#FEFEFE',
    ...shadows.tray,
  },
  primaryButton: {
    display: 'flex',
    backgroundColor: '#1C83E0',
    paddingHorizontal: 36,
    paddingVertical: 16,
    borderRadius: 8,
  },
  secondaryButton: {
    display: 'flex',
    paddingHorizontal: 36,
    paddingVertical: 16,
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    textAlign: 'center',
  },
  secondaryButtonText: {
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    textAlign: 'center',
  },
  linkText: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    marginHorizontal: 24,
    color: '#1C83E0',
    marginTop: 4,
  },
  table: {
    marginHorizontal: 24,
    marginTop: 8,
    marginBottom: 24,
  },
  tableHead: {
    backgroundColor: '#5A72A0',
  },
  tableHeadText: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    marginHorizontal: 24,
    color: '#FFFFFF',
  },
  tableText: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    marginHorizontal: 24,
  },
  tableBorder: {
    borderWidth: 1,
    borderColor: '#5A72A0',
  },
});

export default Results;
